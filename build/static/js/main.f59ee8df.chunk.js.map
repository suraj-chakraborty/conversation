{"version":3,"sources":["service/firebase.js","context/ChatContext.jsx","hooks/useResolved.js","components/App/App.jsx","hooks/useAuth.js","components/Chat/Chat.jsx","components/Login/formikConfig.js","components/Login/Login.jsx","components/FormField/FormField.jsx","components/Signup/formikConfig.js","components/Signup/Signup.jsx","helpers/notMe.js","helpers/groupMessages.js","helpers/joinUsernames.js","components/ChatList/ChatList.jsx","components/LeftRail/LeftRail.jsx","components/ChatInput/ChatInput.jsx","components/RailHeader/RailHeader.jsx","components/ChatAvatar/ChatAvatar.jsx","components/ChatToolbar/ChatToolbar.jsx","components/SearchUsers/SearchUsers.jsx","hooks/useDebounce.js","components/MessageList/MessageList.jsx","hooks/useScrollToBottom.js","components/ImageUpload/ImageUpload.jsx","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","REACT_APP_DATABASE_URL","projectId","storageBucket","messagingSenderId","appId","error","test","message","console","stack","fb","auth","storage","firestore","ChatContext","createContext","ChatProvider","children","authUser","useState","myChats","setMyChats","chatConfig","setChatConfig","selectedChat","setSelectedChat","useEffect","collection","doc","uid","onSnapshot","snap","userSecret","avatar","data","userName","projectID","Provider","value","selectChatClick","chat","getMessages","id","messages","deleteChatClick","admin","window","confirm","deleteChat","leaveChat","createChatClick","newChat","title","useChat","useContext","useResolved","vals","resolved","setResolved","every","v","undefined","App","history","useHistory","setAuthUser","onAuthStateChanged","user","useAuth","authResolved","push","className","exact","path","components","Chat","component","Login","Signup","log","hideUI","onConnect","getChats","onNewChat","username","sort","a","b","onDeleteChat","filter","c","onNewMessage","chatId","chatThatMessageBelongsTo","find","filteredChats","updatedChat","last_message","src","alt","defaultValues","email","password","validationSchema","Yup","shape","required","serverError","setServerError","onSubmit","setSubmitting","signInWithEmailAndPassword","then","res","catch","err","code","finally","validateOnMount","initialValues","isValid","isSubmitting","name","label","type","onClick","disabled","FormField","verifyPassword","min","oneOf","matches","createUserWithEmailAndPassword","fetch","method","body","JSON","stringify","userId","headers","set","notMe","people","p","person","groupMessages","finalArr","currentArr","currentAuthor","forEach","m","sender","splice","length","joinUsernames","currentUsername","map","un","join","ChatList","index","Icon","circular","inverted","color","attachments","text","slice","LeftRail","chatsResolved","Loader","active","size","ChatInput","chatInputText","setChatInputText","imageModelOpen","setImageModelOpen","inputRef","useRef","image","setImage","sendChatMessage","sendMessage","files","input","current","click","placeholder","onKeyPress","e","key","onChange","target","ref","accept","file","onFileAttach","close","RailHeader","configResolved","crop","header","mode","croppedImage","uploadRef","child","put","getDownloadURL","url","update","signOut","IconGroup","Image","toUpperCase","corner","ChatAvatar","setAvatar","where","get","docs","ChatToolbar","searching","setSearching","closeFn","visible","SearchUsers","searchRef","loading","setLoading","searchTerm","setSearchTerm","debouncedSearchTerm","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","searchResults","setSearchResults","focus","getOtherPeople","userNames","Object","keys","u","toLowerCase","includes","style","display","Search","fluid","onBlur","results","open","r","onSearchChange","onResultSelect","result","addPerson","MessageList","trigger","Promise","all","Array","from","document","images","img","complete","resolve","onload","onerror","getElementsByClassName","scrollTop","scrollHeight","individualMessage","ImageUpload","imageSrc","setImageSrc","cropRef","fr","FileReader","readAsDataURL","Modal","dimmer","Header","Content","width","height","border","Actions","canvas","getImageScaledToCanvas","toDataURL","blob","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f59ee8df.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\ntry {\r\n  firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n  });\r\n} catch (error) {\r\n  if (!/already exists/u.test(error.message)) {\r\n    console.error('Firebase admin initialization error', error.stack);\r\n  }\r\n}\r\n\r\nexport const fb = {\r\n  auth: firebase.auth(),\r\n  storage: firebase.storage(),\r\n  firestore: firebase.firestore(),\r\n};\r\n","import { fb } from 'service';\r\nimport { createContext, useContext, useEffect, useState } from 'react';\r\nimport { newChat, leaveChat, deleteChat, getMessages } from 'react-chat-engine';\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatProvider = ({ children, authUser }) => {\r\n  const [myChats, setMyChats] = useState();\r\n  const [chatConfig, setChatConfig] = useState();\r\n  const [selectedChat, setSelectedChat] = useState();\r\n\r\n  const createChatClick = () => {\r\n    newChat(chatConfig, { title: '' });\r\n  };\r\n  const deleteChatClick = chat => {\r\n    const isAdmin = chat.admin === chatConfig.userName;\r\n\r\n    if (\r\n      isAdmin &&\r\n      window.confirm('Are you sure you want to delete this chat?')\r\n    ) {\r\n      deleteChat(chatConfig, chat.id);\r\n    } else if (window.confirm('Are you sure you want to leave this chat?')) {\r\n      leaveChat(chatConfig, chat.id, chatConfig.userName);\r\n    }\r\n  };\r\n  const selectChatClick = chat => {\r\n    getMessages(chatConfig, chat.id, messages => {\r\n      setSelectedChat({\r\n        ...chat,\r\n        messages,\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (authUser) {\r\n      fb.firestore\r\n        .collection('chatUsers')\r\n        .doc(authUser.uid)\r\n        .onSnapshot(snap => {\r\n          setChatConfig({\r\n            userSecret: authUser.uid,\r\n            avatar: snap.data().avatar,\r\n            userName: snap.data().userName,\r\n            projectID: '4c01f6ef-6fc4-47d8-a6d6-a1403a3fcce1',\r\n          });\r\n        });\r\n    }\r\n  }, [authUser, setChatConfig]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        myChats,\r\n        setMyChats,\r\n        chatConfig,\r\n        selectedChat,\r\n        setChatConfig,\r\n        setSelectedChat,\r\n        selectChatClick,\r\n        deleteChatClick,\r\n        createChatClick,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useChat = () => {\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setChatConfig,\r\n    setSelectedChat,\r\n    selectChatClick,\r\n    deleteChatClick,\r\n    createChatClick,\r\n  } = useContext(ChatContext);\r\n\r\n  return {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setChatConfig,\r\n    setSelectedChat,\r\n    selectChatClick,\r\n    deleteChatClick,\r\n    createChatClick,\r\n  };\r\n};\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useResolved = (...vals) => {\r\n  const [resolved, setResolved] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setResolved(vals.every(v => v !== undefined));\r\n  }, [vals]);\r\n\r\n  return resolved;\r\n};\r\n","import { useEffect } from 'react';\r\nimport { ChatProvider } from 'context';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { useAuth, useResolved } from 'hooks';\r\nimport { Login, Signup, Chat } from 'components';\r\nimport { Route, Switch, useHistory } from 'react-router-dom';\r\n\r\nexport const App = () => {\r\n  const history = useHistory();\r\n  const { authUser } = useAuth();\r\n  const authResolved = useResolved(authUser);\r\n\r\n  useEffect(() => {\r\n    if (authResolved) {\r\n      history.push(!!authUser ? '/' : '/login');\r\n    }\r\n  }, [authResolved, authUser, history]);\r\n\r\n  return authResolved ? (\r\n    <ChatProvider authUser={authUser}>\r\n      <div className=\"app\">\r\n        <Switch>\r\n          <Chat exact path=\"/\" components={Chat} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/signup\" component={Signup} />\r\n        </Switch>\r\n      </div>\r\n    </ChatProvider>\r\n  ) : (\r\n    <>Loading...</>\r\n  );\r\n};\r\n","import { fb } from 'service';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const useAuth = () => {\r\n  const [authUser, setAuthUser] = useState();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = fb.auth.onAuthStateChanged(user => {\r\n      if (user) {\r\n        setAuthUser(user);\r\n      } else {\r\n        setAuthUser(null);\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return {\r\n    authUser,\r\n  };\r\n};\r\n","import { useChat } from 'context';\r\nimport { useEffect } from 'react';\r\nimport { getChats, ChatEngine } from 'react-chat-engine';\r\nimport { LeftRail } from 'components';\r\n\r\nimport { ChatToolbar } from 'components';\r\nimport { ChatInput } from 'components';\r\nimport { MessageList } from 'components';\r\n\r\nexport const Chat = () => {\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    selectChatClick,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  useEffect(() => {\r\n    console.log('My Chats: ', myChats);\r\n  }, [myChats]);\r\n\r\n  useEffect(() => {\r\n    console.log('Selected Chat: ', selectedChat);\r\n  }, [selectedChat]);\r\n\r\n  return (\r\n    <>\r\n      <LeftRail />\r\n      {!!chatConfig && (\r\n        <ChatEngine\r\n          hideUI={true}\r\n          userName={chatConfig.userName}\r\n          projectID={chatConfig.projectID}\r\n          userSecret={chatConfig.userSecret}\r\n          onConnect={() => {\r\n            getChats(chatConfig, setMyChats);\r\n          }}\r\n          onNewChat={chat => {\r\n            if (chat.admin.username === chatConfig.userName) {\r\n              selectChatClick(chat);\r\n            }\r\n            setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\r\n          }}\r\n          onDeleteChat={chat => {\r\n            if (selectedChat?.id === chat.id) {\r\n              setSelectedChat(null);\r\n            }\r\n            setMyChats(\r\n              myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n          onNewMessage={(chatId, message) => {\r\n            if (selectedChat && chatId === selectedChat.id) {\r\n              setSelectedChat({\r\n                ...selectedChat,\r\n                messages: [...selectedChat.messages, message],\r\n              });\r\n            }\r\n            const chatThatMessageBelongsTo = myChats.find(c => c.id === chatId);\r\n            const filteredChats = myChats.filter(c => c.id !== chatId);\r\n            const updatedChat = {\r\n              ...chatThatMessageBelongsTo,\r\n              last_message: message,\r\n            };\r\n            setMyChats(\r\n              [updatedChat, ...filteredChats].sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n        />\r\n      )}\r\n      <div className=\"chat-container\">\r\n        <div className=\"current-chat\">\r\n          {selectedChat ? (\r\n            <div className=\"chat\">\r\n              <ChatToolbar />\r\n              <MessageList />\r\n              <ChatInput />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-chat-selected\">\r\n              <img\r\n                src=\"/img/pointLeft.png\"\r\n                className=\"point-left\"\r\n                alt=\"point-left\"\r\n              />\r\n              Select a Chat\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import * as Yup from 'yup';\r\n\r\nexport const defaultValues = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n  email: Yup.string().required('Required'),\r\n  password: Yup.string().required('Required'),\r\n});\r\n","import { fb } from 'service';\r\nimport { useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { FormField } from 'components';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { defaultValues, validationSchema } from './formikConfig';\r\n\r\nexport const Login = () => {\r\n  const history = useHistory();\r\n  const [serverError, setServerError] = useState(' ');\r\n\r\n  const login = ({ email, password }, { setSubmitting }) => {\r\n    fb.auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then(res => {\r\n        if (!res.user) {\r\n          setServerError('we are unable to log you in. please try again.');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.code === 'auth/wrong-password') {\r\n          setServerError('invalid credential');\r\n        } else if (err.code === 'auth/user-not-found') {\r\n          setServerError('account does not exist for this email');\r\n        } else {\r\n          setServerError('Something went wrong :(');\r\n        }\r\n      })\r\n      .finally(() => setSubmitting(false));\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-form\">\r\n      <h1>Login</h1>\r\n\r\n      <Formik\r\n        onSubmit={login}\r\n        validateOnMount={true}\r\n        initialValues={defaultValues}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({ isValid, isSubmitting }) => (\r\n          <Form>\r\n            <FormField name=\"email\" label=\"Email\" type=\"email\" />\r\n            <FormField name=\"password\" label=\"Password\" type=\"password\" />\r\n\r\n            <div className=\"auth-link-container\">\r\n              Don't have an account?{' '}\r\n              <span\r\n                className=\"auth-link\"\r\n                onClick={() => history.push('signup')}\r\n              >\r\n                Sign up!\r\n              </span>\r\n            </div>\r\n\r\n            <button type=\"submit\" disabled={!isValid || isSubmitting}>\r\n              Login\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      {!!serverError && <div className=\"error\">{serverError}</div>}\r\n    </div>\r\n  );\r\n};\r\n","import { ErrorMessage, Field } from 'formik';\r\n\r\nexport const FormField = ({ name, label, type = 'text' }) => (\r\n  <label>\r\n    {label}\r\n    <Field name={name} type={type} />\r\n    <ErrorMessage className=\"error\" component=\"div\" name={name} />\r\n  </label>\r\n);\r\n","import * as Yup from 'yup';\r\n\r\nexport const defaultValues = {\r\n  email: '',\r\n  password: '',\r\n  userName: '',\r\n  verifyPassword: '',\r\n};\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n  email: Yup.string().email('Inamlid email').required('Required'),\r\n  password: Yup.string().required('Required').min(8, 'atleast 8 char'),\r\n  verifyPassword: Yup.string()\r\n    .required('Required')\r\n    .oneOf([Yup.ref('password'), null], 'passwors must match'),\r\n  userName: Yup.string()\r\n    .required('Required')\r\n    .matches(/^\\S*$/, 'No spaces')\r\n    .min(3, 'must be atleast 3 char'),\r\n});\r\n","import { fb } from 'service';\r\nimport { Form, Formik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FormField } from 'components/FormField/FormField';\r\nimport { defaultValues, validationSchema } from './formikConfig';\r\n\r\nexport const Signup = () => {\r\n  const history = useHistory();\r\n  const [serverError, setServerError] = useState('');\r\n\r\n  const signup = ({ email, userName, password }, { setSubmitting }) => {\r\n    fb.auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(res => {\r\n        if (res?.user?.uid) {\r\n          fetch('/api/createUser', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              userName,\r\n              userId: res.user.uid,\r\n            }),\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }).then(() => {\r\n            fb.firestore\r\n              .collection('chatUsers')\r\n              .doc(res.user.uid)\r\n              .set({ userName, avatar: '' });\r\n          });\r\n        } else {\r\n          setServerError(\r\n            \"We're having trouble signing you up. Please try again.\",\r\n          );\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (err.code === 'auth/email-already-in-use') {\r\n          setServerError('An account with this email already exists');\r\n        } else {\r\n          setServerError(\r\n            \"We're having trouble signing you up. Please try again.\",\r\n          );\r\n        }\r\n      })\r\n      .finally(() => setSubmitting(false));\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-form\">\r\n      <h1>Signup</h1>\r\n      <Formik\r\n        onSubmit={signup}\r\n        validateOnMount={true}\r\n        initialValues={defaultValues}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({ isValid, isSubmitting }) => (\r\n          <Form>\r\n            <FormField name=\"userName\" label=\"User Name\" />\r\n            <FormField name=\"email\" label=\"Email\" type=\"email\" />\r\n            <FormField name=\"password\" label=\"Password\" type=\"password\" />\r\n            <FormField\r\n              type=\"password\"\r\n              name=\"verifyPassword\"\r\n              label=\"Verify Password\"\r\n            />\r\n\r\n            <div className=\"auth-link-container\">\r\n              Already have an account?{' '}\r\n              <span className=\"auth-link\" onClick={() => history.push('login')}>\r\n                Log In!\r\n              </span>\r\n            </div>\r\n\r\n            <button disabled={isSubmitting || !isValid} type=\"submit\">\r\n              Sign Up\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      {!!serverError && <div className=\"error\">{serverError}</div>}\r\n    </div>\r\n  );\r\n};\r\n","export const notMe = (chatConfig, selectedChat) => {\r\n  return selectedChat.people.find(\r\n    p => p.person.username !== chatConfig.userName,\r\n  )?.person?.username;\r\n};\r\n","export const groupMessages = messages => {\r\n  const finalArr = [];\r\n\r\n  let currentArr = [];\r\n  let currentAuthor = '';\r\n  messages.forEach(m => {\r\n    if (m.sender.username !== currentAuthor) {\r\n      if (currentAuthor) {\r\n        finalArr.push([...currentArr]);\r\n      }\r\n      currentArr.splice(0, currentArr.length); // empty the array\r\n      currentArr.push(m);\r\n      currentAuthor = m.sender.username;\r\n    } else {\r\n      currentArr.push(m);\r\n    }\r\n  });\r\n  finalArr.push([...currentArr]);\r\n\r\n  return finalArr;\r\n};\r\n","export const joinUsernames = (people, currentUsername) => {\r\n  return (\r\n    ' ' +\r\n    people\r\n      .map(p => p.person.username)\r\n      .filter(un => un !== currentUsername)\r\n      .join(', ')\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useChat } from 'context';\r\nimport { ChatAvatar } from 'components';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { joinUsernames, notMe } from 'helpers';\r\n\r\nexport const ChatList = () => {\r\n  const {\r\n    myChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    selectChatClick,\r\n    deleteChatClick,\r\n  } = useChat();\r\n\r\n  return (\r\n    <div className=\"chat-list\">\r\n      {myChats.map((c, index) => (\r\n        <div\r\n          className={`chat-list-item ${\r\n            selectedChat?.id === c.id ? 'selected-chat-item' : ''\r\n          }`}\r\n          key={index}\r\n        >\r\n          <div\r\n            onClick={() => selectChatClick(c)}\r\n            className=\"chat-list-item-content\"\r\n          >\r\n            {c.people.length === 1 ? (\r\n              <>\r\n                <Icon circular inverted color=\"violet\" name=\"user cancel\" />\r\n                <div className=\"chat-list-preview\">\r\n                  <div className=\"preview-username\">No Users Available</div>\r\n                </div>\r\n              </>\r\n            ) : c.people.length === 2 ? (\r\n              <>\r\n                <ChatAvatar username={notMe(chatConfig, c)} chat={c} />\r\n\r\n                <div className=\"chat-list-preview\">\r\n                  <div className=\"preview-username\">{notMe(chatConfig, c)}</div>\r\n                  <div className=\"preview-message\">\r\n                    {c.last_message.attachments.length\r\n                      ? `${c.last_message.sender.username} sent an attachments`\r\n                      : c.last_message.text.slice(0, 50) + '...'}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Icon circular inverted color=\"brown\" name=\"users\" />\r\n                <div className=\"chat-list-preview\">\r\n                  <div className=\"preview-username\">\r\n                    {joinUsernames(c.people, chatConfig.userName).slice(0, 50)}\r\n                    ...\r\n                  </div>\r\n                  <div className=\"preview-message\">\r\n                    {c.last_message.attachments.length\r\n                      ? `${c.last_message.sender.username} sent an attachments`\r\n                      : c.last_message.text.slice(0, 50) + '...'}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div onClick={() => deleteChatClick(c)} className=\"chat-item-delete\">\r\n            <Icon name=\"delete\" />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { useChat } from 'context';\r\nimport { useResolved } from 'hooks';\r\nimport { ChatList } from 'components';\r\nimport { RailHeader } from 'components';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\nexport const LeftRail = () => {\r\n  const { myChats, createChatClick } = useChat();\r\n  const chatsResolved = useResolved(myChats);\r\n\r\n  return (\r\n    <div className=\"left-rail\">\r\n      <RailHeader />\r\n      {chatsResolved ? (\r\n        <>\r\n          {!!myChats.length ? (\r\n            <div className=\"chat-list-container\">\r\n              <ChatList />\r\n            </div>\r\n          ) : (\r\n            <div className=\"chat-list-container no-chats-yet\">\r\n              <h3>No Chats Yet</h3>\r\n            </div>\r\n          )}\r\n          <button className=\"create-chat-button\" onClick={createChatClick}>\r\n            Create Chat\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <div className=\"chats-loading\">\r\n          <Loader active size=\"medium\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { useChat } from 'context';\r\nimport { useState, useRef } from 'react';\r\n\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { sendMessage } from 'react-chat-engine';\r\nimport { ImageUpload } from 'components';\r\n\r\nexport const ChatInput = () => {\r\n  const { chatConfig, selectedChat } = useChat();\r\n  const [chatInputText, setChatInputText] = useState('');\r\n  const [imageModelOpen, setImageModelOpen] = useState(false);\r\n\r\n  const inputRef = useRef(null);\r\n  const [image, setImage] = useState();\r\n\r\n  const sendChatMessage = () => {\r\n    if (selectedChat && chatInputText) {\r\n      setChatInputText('');\r\n      sendMessage(chatConfig, selectedChat.id, {\r\n        text: chatInputText,\r\n        files: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFileAttach = file => {\r\n    setImage(file);\r\n    setImageModelOpen(true);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"chat-controls\">\r\n        <div\r\n          onClick={() => {\r\n            const input = inputRef.current;\r\n            if (input) {\r\n              input.value = '';\r\n              input.click();\r\n            }\r\n          }}\r\n          className=\"attachment-icon\"\r\n        >\r\n          <Icon name=\"attach\" color=\"grey\" />\r\n        </div>\r\n\r\n        <input\r\n          value={chatInputText}\r\n          className=\"chat-input\"\r\n          placeholder=\"send a message\"\r\n          onKeyPress={e => {\r\n            if (e.key === 'Enter') {\r\n              sendChatMessage();\r\n            }\r\n          }}\r\n          onChange={e => setChatInputText(e.target.value)}\r\n        />\r\n\r\n        <div onClick={sendChatMessage} className=\"send-message-icon\">\r\n          <Icon name=\"send\" color=\"green\" />\r\n        </div>\r\n      </div>\r\n\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        className=\"file-input\"\r\n        accept=\"image/jpeg,image/png\"\r\n        onChange={e => {\r\n          const file = e.target?.files?.[0];\r\n          if (file) {\r\n            onFileAttach(file);\r\n          }\r\n        }}\r\n      />\r\n      {imageModelOpen && !!image && (\r\n        <ImageUpload\r\n          file={image}\r\n          onSubmit={() => {\r\n            sendMessage(\r\n              chatConfig,\r\n              selectedChat.id,\r\n              { text: chatInputText, files: [image] },\r\n              () => {\r\n                setImage(null);\r\n                setChatInputText('');\r\n              },\r\n            );\r\n          }}\r\n          close={() => setImageModelOpen(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { fb } from 'service';\nimport { useChat } from 'context';\nimport { useResolved } from 'hooks';\nimport { useRef, useState } from 'react';\nimport { ImageUpload } from 'components';\nimport { Icon, IconGroup, Image, Loader } from 'semantic-ui-react';\n\nexport const RailHeader = () => {\n  const { chatConfig } = useChat();\n  const configResolved = useResolved(chatConfig);\n  const inputRef = useRef(null);\n  const [image, setImage] = useState();\n\n  const onFileAttach = file => {\n    setImage(file);\n  };\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        ref={inputRef}\n        className=\"file-input\"\n        accept=\"image/jpeg,image/png\"\n        onChange={e => {\n          const file = e.target?.files?.[0];\n          if (file) {\n            onFileAttach(file);\n          }\n        }}\n      />\n\n      {!!image && (\n        <ImageUpload\n          crop\n          file={image}\n          header=\"Set Your Avatar\"\n          mode=\"message\"\n          onSubmit={croppedImage => {\n            const storageRef = fb.storage.ref();\n            const uploadRef = storageRef.child(\n              `${chatConfig.userSecret}_avatar.jpg`,\n            );\n            uploadRef.put(croppedImage).then(() => {\n              uploadRef.getDownloadURL().then(url => {\n                fb.firestore\n                  .collection('chatUsers')\n                  .doc(chatConfig.userSecret)\n                  .update({ avatar: url })\n                  .then(() => {\n                    setImage(null);\n                  });\n              });\n            });\n          }}\n          close={() => setImage(null)}\n        />\n      )}\n\n      <div className=\"left-rail-header\">\n        <Icon\n          onClick={() => fb.auth.signOut()}\n          className=\"sign-out\"\n          name=\"sign out\"\n        />\n        {configResolved && !!chatConfig ? (\n          <div className=\"current-user-info\">\n            <IconGroup\n              onClick={() => {\n                const input = inputRef.current;\n                if (input) {\n                  input.value = '';\n                  input.click();\n                }\n              }}\n              className=\"user-avatar\"\n              size=\"large\"\n            >\n              {chatConfig.avatar ? (\n                <Image src={chatConfig.avatar} avatar />\n              ) : (\n                <div className=\"empty-avatar\">\n                  {chatConfig.userName[0].toUpperCase()}\n                </div>\n              )}\n\n              <Icon corner name=\"camera\" inverted circular />\n            </IconGroup>\n\n            <div className=\"current-username\">{chatConfig.userName}</div>\n          </div>\n        ) : (\n          <div className=\"user-loading\">\n            <Loader active size=\"small\" />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import { fb } from 'service';\r\nimport { useChat } from 'context';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Image } from 'semantic-ui-react';\r\n\r\nexport const ChatAvatar = ({ chat, username, className }) => {\r\n  const { chatConfig } = useChat();\r\n  const [avatar, setAvatar] = useState('');\r\n\r\n  useEffect(() => {\r\n    fb.firestore\r\n      .collection('chatUsers')\r\n      .where('userName', '==', username)\r\n      .get()\r\n      .then(snap => {\r\n        const data = snap.docs[0]?.data();\r\n        if (data?.avatar) {\r\n          setAvatar(data.avatar);\r\n        }\r\n      });\r\n  }, [chat, chatConfig, username]);\r\n\r\n  return avatar ? (\r\n    <Image className={className || 'chat-list-avatar'} src={avatar} />\r\n  ) : (\r\n    <div className={className || 'empty-avatar'}>\r\n      {chat.people\r\n        .find(p => p.person.username !== chatConfig.userName)\r\n        .person.username[0].toUpperCase()}\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { useChat } from 'context';\r\nimport { joinUsernames } from 'helpers';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { SearchUsers } from 'components';\r\n\r\nexport const ChatToolbar = () => {\r\n  const { selectedChat, chatConfig } = useChat();\r\n  const [searching, setSearching] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chat-toolbar\">\r\n        <div className=\"chat-header-text\">\r\n          {joinUsernames(selectedChat.people, chatConfig.userName).slice(0, 50)}\r\n        </div>\r\n\r\n        <div className=\"add-user-icon\">\r\n          <Icon\r\n            color=\"grey\"\r\n            name=\"user plus\"\r\n            onClick={() => setSearching(true)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <SearchUsers closeFn={() => setSearching(false)} visible={searching} />\r\n    </>\r\n  );\r\n};\r\n","import { useChat } from 'context';\r\nimport { useDebounce } from 'hooks';\r\nimport { Search } from 'semantic-ui-react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { addPerson, getOtherPeople } from 'react-chat-engine';\r\n\r\nexport const SearchUsers = ({ visible, closeFn }) => {\r\n  let searchRef = useRef();\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n\r\n  const [searchResults, setSearchResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (visible && searchRef) {\r\n      searchRef.focus();\r\n    }\r\n  }, [visible]);\r\n\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  const selectUser = username => {\r\n    addPerson(chatConfig, selectedChat.id, username, () => {\r\n      const filteredChats = myChats.filter(c => c.id !== selectedChat.id);\r\n      const updatedChat = {\r\n        ...selectedChat,\r\n        people: [...selectedChat.people, { person: { username } }],\r\n      };\r\n      setSelectedChat(updatedChat);\r\n      setMyChats([...filteredChats, updatedChat]);\r\n      closeFn();\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm) {\r\n      setLoading(true);\r\n\r\n      getOtherPeople(chatConfig, selectedChat.id, (chatId, data) => {\r\n        const userNames = Object.keys(data)\r\n          .map(key => data[key].username)\r\n          .filter(u =>\r\n            u.toLowerCase().includes(debouncedSearchTerm.toLowerCase()),\r\n          );\r\n\r\n        setSearchResults(userNames.map(u => ({ title: u })));\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      setSearchResults(null);\r\n    }\r\n  }, [chatConfig, selectedChat, debouncedSearchTerm]);\r\n\r\n  return (\r\n    <div\r\n      className=\"user-search\"\r\n      style={{ display: visible ? 'block' : 'none' }}\r\n    >\r\n      <Search\r\n        fluid\r\n        onBlur={closeFn}\r\n        loading={loading}\r\n        value={searchTerm}\r\n        results={searchResults}\r\n        placeholder=\"search for user\"\r\n        open={!!searchResults && !loading}\r\n        input={{ ref: r => (searchRef = r) }}\r\n        onSearchChange={e => setSearchTerm(e.target.value)}\r\n        onResultSelect={(e, data) => {\r\n          if (data.result?.title) {\r\n            selectUser(data.result.title);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useDebounce = (value, delay) => {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n    return () => clearTimeout(handler);\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n","import { useChat } from 'context';\r\nimport { ChatAvatar } from 'components';\r\nimport { groupMessages } from 'helpers';\r\nimport { useScrollToBottom } from 'hooks';\r\n\r\nexport const MessageList = () => {\r\n  const { selectedChat } = useChat();\r\n  useScrollToBottom(selectedChat, 'chat-messages');\r\n\r\n  return (\r\n    <div className=\"chat-messages\">\r\n      {!!selectedChat.messages.length ? (\r\n        groupMessages(selectedChat.messages).map((m, index) => (\r\n          <div key={index} className=\"chat-message\">\r\n            <div className=\"chat-message-header\">\r\n              <ChatAvatar\r\n                className=\"message-avatar\"\r\n                username={m[0].sender.username}\r\n                chat={selectedChat}\r\n              />\r\n              <div className=\"message-author\">{m[0].sender.username}</div>\r\n            </div>\r\n\r\n            <div className=\"message-content\">\r\n              {m.map((individualMessage, index) => (\r\n                <div key={index}>\r\n                  <div className=\"message-text\">{individualMessage.text}</div>\r\n\r\n                  {!!individualMessage.attachments.length && (\r\n                    <img\r\n                      className=\"message-image\"\r\n                      src={individualMessage.attachments[0].file}\r\n                      alt={individualMessage.id + '-attachment'}\r\n                    />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className=\"no-messages-yet\">No messages yet</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nexport const useScrollToBottom = (trigger, className) => {\r\n  useEffect(() => {\r\n    if (!!trigger) {\r\n      Promise.all(\r\n        Array.from(document.images)\r\n          .filter(img => !img.complete)\r\n          .map(\r\n            img =>\r\n              new Promise(resolve => {\r\n                img.onload = img.onerror = resolve;\r\n              }),\r\n          ),\r\n      ).then(() => {\r\n        document.getElementsByClassName(\r\n          className,\r\n        )[0].scrollTop = document.getElementsByClassName(\r\n          className,\r\n        )[0].scrollHeight;\r\n      });\r\n    }\r\n  }, [trigger, className]);\r\n};\r\n","import AvatarEditor from 'react-avatar-editor';\r\nimport { Image, Modal } from 'semantic-ui-react';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\nexport const ImageUpload = ({\r\n  file,\r\n  close,\r\n  onSubmit,\r\n  crop = false,\r\n  header = 'Send This Image?',\r\n}) => {\r\n  const [imageSrc, setImageSrc] = useState('');\r\n  const cropRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fr = new FileReader();\r\n    fr.onload = () => setImageSrc(fr.result);\r\n    fr.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  return (\r\n    <Modal dimmer=\"blurring\" open={true}>\r\n      <Modal.Header>{header}</Modal.Header>\r\n\r\n      <Modal.Content image>\r\n        {crop ? (\r\n          <AvatarEditor\r\n            ref={cropRef}\r\n            width={200}\r\n            height={200}\r\n            border={50}\r\n            image={imageSrc}\r\n          />\r\n        ) : (\r\n          <Image size=\"medium\" src={imageSrc} alt=\"preview\" />\r\n        )}\r\n      </Modal.Content>\r\n\r\n      <Modal.Actions>\r\n        <div className=\"image-upload-actions\">\r\n          <button className=\"cancel\" onClick={close}>\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"submit\"\r\n            onClick={() => {\r\n              if (crop && cropRef) {\r\n                const canvas = cropRef.current\r\n                  .getImageScaledToCanvas()\r\n                  .toDataURL();\r\n                fetch(canvas)\r\n                  .then(res => res.blob())\r\n                  .then(blob => onSubmit(blob));\r\n              } else {\r\n                onSubmit();\r\n              }\r\n            }}\r\n          >\r\n            Upload\r\n          </button>\r\n        </div>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from 'components';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}