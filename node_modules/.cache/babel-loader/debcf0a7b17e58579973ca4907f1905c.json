{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\react\\\\chat_app\\\\react-chatengine-demo\\\\src\\\\components\\\\ImageUpload\\\\ImageUpload.jsx\",\n    _s = $RefreshSig$();\n\nimport AvatarEditor from 'react-avatar-editor';\nimport { Image, Modal } from 'semantic-ui-react';\nimport { useEffect, useRef, useState } from 'react';\nexport const ImageUpload = ({\n  file,\n  close,\n  onSubmit,\n  crop = false,\n  header = 'Send This Image?'\n}) => {\n  _s();\n\n  const [imageSrc, setImageSrc] = useState('');\n  const cropRef = useRef(); // Use the File Reader API to\n  // read the file and set the source\n\n  useEffect(() => {\n    const fr = new FileReader();\n\n    fr.onload = () => setImageSrc(fr.result);\n\n    fr.readAsDataURL(file);\n  }, [file]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    dimmer: \"blurring\",\n    open: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      image: true,\n      children: crop ? /*#__PURE__*/_jsxDEV(AvatarEditor, {\n        ref: cropRef,\n        width: 200,\n        height: 200,\n        border: 50,\n        image: imageSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Image, {\n        size: \"medium\",\n        src: imageSrc,\n        alt: \"preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-upload-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel\",\n          onClick: close,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit\",\n          onClick: () => {\n            if (crop && cropRef) {\n              const canvas = cropRef.current.getImageScaledToCanvas().toDataURL();\n              fetch(canvas).then(res => res.blob()).then(blob => onSubmit(blob));\n            } else {\n              onSubmit();\n            }\n          },\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageUpload, \"yDM2u2GTjgAyRXV2cbPR/MrXi1k=\");\n\n_c = ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["F:/react/chat_app/react-chatengine-demo/src/components/ImageUpload/ImageUpload.jsx"],"names":["AvatarEditor","Image","Modal","useEffect","useRef","useState","ImageUpload","file","close","onSubmit","crop","header","imageSrc","setImageSrc","cropRef","fr","FileReader","onload","result","readAsDataURL","canvas","current","getImageScaledToCanvas","toDataURL","fetch","then","res","blob"],"mappings":";;;;;AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,IAD0B;AAE1BC,EAAAA,KAF0B;AAG1BC,EAAAA,QAH0B;AAI1BC,EAAAA,IAAI,GAAG,KAJmB;AAK1BC,EAAAA,MAAM,GAAG;AALiB,CAAD,KAMrB;AAAA;;AACJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMS,OAAO,GAAGV,MAAM,EAAtB,CAFI,CAIJ;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,EAAE,GAAG,IAAIC,UAAJ,EAAX;;AACAD,IAAAA,EAAE,CAACE,MAAH,GAAY,MAAMJ,WAAW,CAACE,EAAE,CAACG,MAAJ,CAA7B;;AACAH,IAAAA,EAAE,CAACI,aAAH,CAAiBZ,IAAjB;AACD,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMA,sBACE,QAAC,KAAD;AAAO,IAAA,MAAM,EAAC,UAAd;AAAyB,IAAA,IAAI,EAAE,IAA/B;AAAA,4BACE,QAAC,KAAD,CAAO,MAAP;AAAA,gBAAeI;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,KAAD,CAAO,OAAP;AAAe,MAAA,KAAK,MAApB;AAAA,gBACGD,IAAI,gBACH,QAAC,YAAD;AACE,QAAA,GAAG,EAAEI,OADP;AAEE,QAAA,KAAK,EAAE,GAFT;AAGE,QAAA,MAAM,EAAE,GAHV;AAIE,QAAA,MAAM,EAAE,EAJV;AAKE,QAAA,KAAK,EAAEF;AALT;AAAA;AAAA;AAAA;AAAA,cADG,gBASH,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,GAAG,EAAEA,QAA1B;AAAoC,QAAA,GAAG,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,YAHF,eAiBE,QAAC,KAAD,CAAO,OAAP;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,QAAlB;AAA2B,UAAA,OAAO,EAAEJ,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AACE,UAAA,SAAS,EAAC,QADZ;AAEE,UAAA,OAAO,EAAE,MAAM;AACb,gBAAIE,IAAI,IAAII,OAAZ,EAAqB;AACnB,oBAAMM,MAAM,GAAGN,OAAO,CAACO,OAAR,CACZC,sBADY,GAEZC,SAFY,EAAf;AAGAC,cAAAA,KAAK,CAACJ,MAAD,CAAL,CACGK,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIlB,QAAQ,CAACkB,IAAD,CAFxB;AAGD,aAPD,MAOO;AACLlB,cAAAA,QAAQ;AACT;AACF,WAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD,CA9DM;;GAAMH,W;;KAAAA,W","sourcesContent":["import AvatarEditor from 'react-avatar-editor';\r\nimport { Image, Modal } from 'semantic-ui-react';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\nexport const ImageUpload = ({\r\n  file,\r\n  close,\r\n  onSubmit,\r\n  crop = false,\r\n  header = 'Send This Image?',\r\n}) => {\r\n  const [imageSrc, setImageSrc] = useState('');\r\n  const cropRef = useRef();\r\n\r\n  // Use the File Reader API to\r\n  // read the file and set the source\r\n  useEffect(() => {\r\n    const fr = new FileReader();\r\n    fr.onload = () => setImageSrc(fr.result);\r\n    fr.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  return (\r\n    <Modal dimmer=\"blurring\" open={true}>\r\n      <Modal.Header>{header}</Modal.Header>\r\n\r\n      <Modal.Content image>\r\n        {crop ? (\r\n          <AvatarEditor\r\n            ref={cropRef}\r\n            width={200}\r\n            height={200}\r\n            border={50}\r\n            image={imageSrc}\r\n          />\r\n        ) : (\r\n          <Image size=\"medium\" src={imageSrc} alt=\"preview\" />\r\n        )}\r\n      </Modal.Content>\r\n\r\n      <Modal.Actions>\r\n        <div className=\"image-upload-actions\">\r\n          <button className=\"cancel\" onClick={close}>\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"submit\"\r\n            onClick={() => {\r\n              if (crop && cropRef) {\r\n                const canvas = cropRef.current\r\n                  .getImageScaledToCanvas()\r\n                  .toDataURL();\r\n                fetch(canvas)\r\n                  .then(res => res.blob())\r\n                  .then(blob => onSubmit(blob));\r\n              } else {\r\n                onSubmit();\r\n              }\r\n            }}\r\n          >\r\n            Upload\r\n          </button>\r\n        </div>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}