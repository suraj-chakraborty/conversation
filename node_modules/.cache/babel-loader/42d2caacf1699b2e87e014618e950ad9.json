{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\react\\\\chat_app\\\\react-chatengine-demo\\\\src\\\\components\\\\SearchUsers\\\\SearchUsers.jsx\",\n    _s = $RefreshSig$();\n\nimport { useChat } from 'context';\nimport { useDebounce } from 'hooks';\nimport { Search } from 'semantic-ui-react';\nimport { useEffect, useRef, useState } from 'react';\nimport { addPerson, getOtherPeople } from 'react-chat-engine';\nexport const SearchUsers = ({\n  visible,\n  closeFn\n}) => {\n  _s();\n\n  let searchRef = useRef();\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  const [searchResults, setSearchResults] = useState(null);\n  useEffect(() => {\n    if (visible && searchRef) {\n      searchRef.focus();\n    }\n  }, [visible]);\n  const {\n    myChats,\n    setMyChats,\n    chatConfig,\n    selectedChat,\n    setSelectedChat\n  } = useChat();\n\n  const selectUser = username => {\n    const filteredChats = myChats.filter(c => c.id !== selectedChat.id);\n    const updatedChat = { ...selectedChat,\n      people: [...selectedChat.people, {\n        person: {\n          username\n        }\n      }]\n    };\n    setSelectedChat(updatedChat);\n    setMyChats([...filteredChats, updatedChat]);\n    closeFn();\n  };\n\n  useEffect(() => {\n    if (searchTerm) {\n      setLoading(true);\n      getOtherPeople(chatConfig, selectedChat.id, (chatId, data) => {\n        const userNames = Object.keys(data).map(key => data[key].username).filter(u => u.toLowerCase().includes(searchTerm.toLowerCase()));\n        setSearchResults(userNames.map(u => ({\n          title: u\n        })));\n        setLoading(false);\n      });\n    } else {\n      setSearchResults(null);\n    }\n  }, [chatConfig, selectedChat, searchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-search\",\n    style: {\n      display: visible ? 'block' : 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(Search, {\n      fluid: true,\n      onBlur: closeFn,\n      loading: loading,\n      value: searchTerm,\n      results: searchResults,\n      placeholder: \"search for user\",\n      open: !!searchResults && !loading,\n      input: {\n        ref: r => searchRef = r\n      },\n      onSearchChange: e => setSearchTerm(e.target.value),\n      onResultSelect: (e, data) => {\n        var _data$result;\n\n        if ((_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.title) {\n          selectUser(data.result.title);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchUsers, \"7/Tp692jlQ9L5cZSwQYGv7bAOgs=\", false, function () {\n  return [useDebounce, useChat];\n});\n\n_c = SearchUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchUsers\");","map":{"version":3,"sources":["F:/react/chat_app/react-chatengine-demo/src/components/SearchUsers/SearchUsers.jsx"],"names":["useChat","useDebounce","Search","useEffect","useRef","useState","addPerson","getOtherPeople","SearchUsers","visible","closeFn","searchRef","loading","setLoading","searchTerm","setSearchTerm","debouncedSearchTerm","searchResults","setSearchResults","focus","myChats","setMyChats","chatConfig","selectedChat","setSelectedChat","selectUser","username","filteredChats","filter","c","id","updatedChat","people","person","chatId","data","userNames","Object","keys","map","key","u","toLowerCase","includes","title","display","ref","r","e","target","value","result"],"mappings":"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","sourcesContent":["import { useChat } from 'context';\r\nimport { useDebounce } from 'hooks';\r\nimport { Search } from 'semantic-ui-react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { addPerson, getOtherPeople } from 'react-chat-engine';\r\n\r\nexport const SearchUsers = ({ visible, closeFn }) => {\r\n  let searchRef = useRef();\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n  const [searchResults, setSearchResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (visible && searchRef) {\r\n      searchRef.focus();\r\n    }\r\n  }, [visible]);\r\n\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  const selectUser = username => {\r\n    const filteredChats = myChats.filter(c => c.id !== selectedChat.id);\r\n    const updatedChat = {\r\n      ...selectedChat,\r\n      people: [...selectedChat.people, { person: { username } }],\r\n    };\r\n    setSelectedChat(updatedChat);\r\n    setMyChats([...filteredChats, updatedChat]);\r\n    closeFn();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchTerm) {\r\n      setLoading(true);\r\n\r\n      getOtherPeople(chatConfig, selectedChat.id, (chatId, data) => {\r\n        const userNames = Object.keys(data)\r\n          .map(key => data[key].username)\r\n          .filter(u => u.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n        setSearchResults(userNames.map(u => ({ title: u })));\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      setSearchResults(null);\r\n    }\r\n  }, [chatConfig, selectedChat, searchTerm]);\r\n\r\n  return (\r\n    <div\r\n      className=\"user-search\"\r\n      style={{ display: visible ? 'block' : 'none' }}\r\n    >\r\n      <Search\r\n        fluid\r\n        onBlur={closeFn}\r\n        loading={loading}\r\n        value={searchTerm}\r\n        results={searchResults}\r\n        placeholder=\"search for user\"\r\n        open={!!searchResults && !loading}\r\n        input={{ ref: r => (searchRef = r) }}\r\n        onSearchChange={e => setSearchTerm(e.target.value)}\r\n        onResultSelect={(e, data) => {\r\n          if (data.result?.title) {\r\n            selectUser(data.result.title);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}