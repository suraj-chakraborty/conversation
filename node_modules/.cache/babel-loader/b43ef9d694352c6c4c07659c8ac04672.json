{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\react\\\\chat_app\\\\react-chatengine-demo\\\\src\\\\components\\\\Chat\\\\Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport { useChat } from 'context';\nimport { useEffect } from 'react';\nimport { LeftRail } from 'components';\nimport { getChats, ChatEngine } from 'react-chat-engine';\nimport { ChatToolbar } from 'components';\nexport const Chat = () => {\n  _s();\n\n  const {\n    myChats,\n    setMyChats,\n    chatConfig,\n    selectedChat,\n    selectChatClick,\n    setSelectedChat\n  } = useChat();\n  useEffect(() => {\n    console.log('My Chats: ', myChats);\n  }, [myChats]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LeftRail, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), !!chatConfig && /*#__PURE__*/_jsxDEV(ChatEngine, {\n      hideUI: true,\n      userName: chatConfig.userName,\n      projectID: chatConfig.projectID,\n      userSecret: chatConfig.userSecret,\n      onConnect: () => {\n        getChats(chatConfig, setMyChats);\n      },\n      onNewChat: chat => {\n        if (chat.admin.username === chatConfig.userName) {\n          selectChatClick(chat);\n        }\n\n        setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\n      },\n      onDeleteChat: chat => {\n        if ((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id) === chat.id) {\n          setSelectedChat(null);\n        }\n\n        setMyChats(myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-chat\",\n        children: selectedChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat\",\n          children: /*#__PURE__*/_jsxDEV(ChatToolbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-chat-selected\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/img/pointLeft.png\",\n            className: \"point-left\",\n            alt: \"point-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), \"Select a CHAT\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"dK/jV014KC7hLV7eua349Vhl8c8=\", false, function () {\n  return [useChat];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["F:/react/chat_app/react-chatengine-demo/src/components/Chat/Chat.jsx"],"names":["useChat","useEffect","LeftRail","getChats","ChatEngine","ChatToolbar","Chat","myChats","setMyChats","chatConfig","selectedChat","selectChatClick","setSelectedChat","console","log","userName","projectID","userSecret","chat","admin","username","sort","a","b","id","filter","c"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,SAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,mBAArC;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACxB,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,eALI;AAMJC,IAAAA;AANI,MAOFZ,OAAO,EAPX;AASAC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,OAA1B;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAAC,CAACE,UAAF,iBACC,QAAC,UAAD;AACE,MAAA,MAAM,EAAE,IADV;AAEE,MAAA,QAAQ,EAAEA,UAAU,CAACM,QAFvB;AAGE,MAAA,SAAS,EAAEN,UAAU,CAACO,SAHxB;AAIE,MAAA,UAAU,EAAEP,UAAU,CAACQ,UAJzB;AAKE,MAAA,SAAS,EAAE,MAAM;AACfd,QAAAA,QAAQ,CAACM,UAAD,EAAaD,UAAb,CAAR;AACD,OAPH;AAQE,MAAA,SAAS,EAAEU,IAAI,IAAI;AACjB,YAAIA,IAAI,CAACC,KAAL,CAAWC,QAAX,KAAwBX,UAAU,CAACM,QAAvC,EAAiD;AAC/CJ,UAAAA,eAAe,CAACO,IAAD,CAAf;AACD;;AACDV,QAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaW,IAAb,EAAmBG,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAA3C,CAAD,CAAV;AACD,OAbH;AAcE,MAAA,YAAY,EAAEN,IAAI,IAAI;AACpB,YAAI,CAAAR,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEc,EAAd,MAAqBN,IAAI,CAACM,EAA9B,EAAkC;AAChCZ,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AACDJ,QAAAA,UAAU,CACRD,OAAO,CAACkB,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASN,IAAI,CAACM,EAAlC,EAAsCH,IAAtC,CAA2C,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAA9D,CADQ,CAAV;AAGD;AArBH;AAAA;AAAA;AAAA;AAAA,YAHJ,eA2BE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBACGd,YAAY,gBACX;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADW,gBAKX;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACE;AACE,YAAA,GAAG,EAAC,oBADN;AAEE,YAAA,SAAS,EAAC,YAFZ;AAGE,YAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA,kBADF;AAgDD,CA9DM;;GAAMJ,I;UAQPN,O;;;KAROM,I","sourcesContent":["import { useChat } from 'context';\r\nimport { useEffect } from 'react';\r\nimport { LeftRail } from 'components';\r\nimport { getChats, ChatEngine } from 'react-chat-engine';\r\nimport { ChatToolbar } from 'components';\r\n\r\nexport const Chat = () => {\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    selectChatClick,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  useEffect(() => {\r\n    console.log('My Chats: ', myChats);\r\n  }, [myChats]);\r\n\r\n  return (\r\n    <>\r\n      <LeftRail />\r\n      {!!chatConfig && (\r\n        <ChatEngine\r\n          hideUI={true}\r\n          userName={chatConfig.userName}\r\n          projectID={chatConfig.projectID}\r\n          userSecret={chatConfig.userSecret}\r\n          onConnect={() => {\r\n            getChats(chatConfig, setMyChats);\r\n          }}\r\n          onNewChat={chat => {\r\n            if (chat.admin.username === chatConfig.userName) {\r\n              selectChatClick(chat);\r\n            }\r\n            setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\r\n          }}\r\n          onDeleteChat={chat => {\r\n            if (selectedChat?.id === chat.id) {\r\n              setSelectedChat(null);\r\n            }\r\n            setMyChats(\r\n              myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n        />\r\n      )}\r\n      <div className=\"chat-container\">\r\n        <div className=\"current-chat\">\r\n          {selectedChat ? (\r\n            <div className=\"chat\">\r\n              <ChatToolbar />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-chat-selected\">\r\n              <img\r\n                src=\"/img/pointLeft.png\"\r\n                className=\"point-left\"\r\n                alt=\"point-left\"\r\n              />\r\n              Select a CHAT\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}