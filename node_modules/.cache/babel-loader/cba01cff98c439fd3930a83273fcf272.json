{"ast":null,"code":"import _slicedToArray from\"F:/react/conversation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import AvatarEditor from'react-avatar-editor';import{Image,Modal}from'semantic-ui-react';import{useEffect,useRef,useState}from'react';export var ImageUpload=function ImageUpload(_ref){var file=_ref.file,close=_ref.close,onSubmit=_ref.onSubmit,_ref$crop=_ref.crop,crop=_ref$crop===void 0?false:_ref$crop,_ref$header=_ref.header,header=_ref$header===void 0?'Send This Image?':_ref$header;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),imageSrc=_useState2[0],setImageSrc=_useState2[1];var cropRef=useRef();useEffect(function(){var fr=new FileReader();fr.onload=function(){return setImageSrc(fr.result);};fr.readAsDataURL(file);},[file]);return/*#__PURE__*/_jsxs(Modal,{dimmer:\"blurring\",open:true,children:[/*#__PURE__*/_jsx(Modal.Header,{children:header}),/*#__PURE__*/_jsx(Modal.Content,{image:true,children:crop?/*#__PURE__*/_jsx(AvatarEditor,{ref:cropRef,width:200,height:200,border:50,image:imageSrc}):/*#__PURE__*/_jsx(Image,{size:\"medium\",src:imageSrc,alt:\"preview\"})}),/*#__PURE__*/_jsx(Modal.Actions,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"image-upload-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"cancel\",onClick:close,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{className:\"submit\",onClick:function onClick(){if(crop&&cropRef){var canvas=cropRef.current.getImageScaledToCanvas().toDataURL();fetch(canvas).then(function(res){return res.blob();}).then(function(blob){return onSubmit(blob);});}else{onSubmit();}},children:\"Upload\"})]})})]});};","map":{"version":3,"sources":["F:/react/conversation/src/components/ImageUpload/ImageUpload.jsx"],"names":["AvatarEditor","Image","Modal","useEffect","useRef","useState","ImageUpload","file","close","onSubmit","crop","header","imageSrc","setImageSrc","cropRef","fr","FileReader","onload","result","readAsDataURL","canvas","current","getImageScaledToCanvas","toDataURL","fetch","then","res","blob"],"mappings":"oOAAA,MAAOA,CAAAA,YAAP,KAAyB,qBAAzB,CACA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,mBAA7B,CACA,OAASC,SAAT,CAAoBC,MAApB,CAA4BC,QAA5B,KAA4C,OAA5C,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAMrB,IALJC,CAAAA,IAKI,MALJA,IAKI,CAJJC,KAII,MAJJA,KAII,CAHJC,QAGI,MAHJA,QAGI,gBAFJC,IAEI,CAFJA,IAEI,oBAFG,KAEH,4BADJC,MACI,CADJA,MACI,sBADK,kBACL,2BAC4BN,QAAQ,CAAC,EAAD,CADpC,wCACGO,QADH,eACaC,WADb,eAEJ,GAAMC,CAAAA,OAAO,CAAGV,MAAM,EAAtB,CAEAD,SAAS,CAAC,UAAM,CACd,GAAMY,CAAAA,EAAE,CAAG,GAAIC,CAAAA,UAAJ,EAAX,CACAD,EAAE,CAACE,MAAH,CAAY,iBAAMJ,CAAAA,WAAW,CAACE,EAAE,CAACG,MAAJ,CAAjB,EAAZ,CACAH,EAAE,CAACI,aAAH,CAAiBZ,IAAjB,EACD,CAJQ,CAIN,CAACA,IAAD,CAJM,CAAT,CAMA,mBACE,MAAC,KAAD,EAAO,MAAM,CAAC,UAAd,CAAyB,IAAI,CAAE,IAA/B,wBACE,KAAC,KAAD,CAAO,MAAP,WAAeI,MAAf,EADF,cAGE,KAAC,KAAD,CAAO,OAAP,EAAe,KAAK,KAApB,UACGD,IAAI,cACH,KAAC,YAAD,EACE,GAAG,CAAEI,OADP,CAEE,KAAK,CAAE,GAFT,CAGE,MAAM,CAAE,GAHV,CAIE,MAAM,CAAE,EAJV,CAKE,KAAK,CAAEF,QALT,EADG,cASH,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,GAAG,CAAEA,QAA1B,CAAoC,GAAG,CAAC,SAAxC,EAVJ,EAHF,cAiBE,KAAC,KAAD,CAAO,OAAP,wBACE,aAAK,SAAS,CAAC,sBAAf,wBACE,eAAQ,SAAS,CAAC,QAAlB,CAA2B,OAAO,CAAEJ,KAApC,oBADF,cAIE,eACE,SAAS,CAAC,QADZ,CAEE,OAAO,CAAE,kBAAM,CACb,GAAIE,IAAI,EAAII,OAAZ,CAAqB,CACnB,GAAMM,CAAAA,MAAM,CAAGN,OAAO,CAACO,OAAR,CACZC,sBADY,GAEZC,SAFY,EAAf,CAGAC,KAAK,CAACJ,MAAD,CAAL,CACGK,IADH,CACQ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EADX,EAEGF,IAFH,CAEQ,SAAAE,IAAI,QAAIlB,CAAAA,QAAQ,CAACkB,IAAD,CAAZ,EAFZ,EAGD,CAPD,IAOO,CACLlB,QAAQ,GACT,CACF,CAbH,oBAJF,GADF,EAjBF,GADF,CA4CD,CA5DM","sourcesContent":["import AvatarEditor from 'react-avatar-editor';\r\nimport { Image, Modal } from 'semantic-ui-react';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\nexport const ImageUpload = ({\r\n  file,\r\n  close,\r\n  onSubmit,\r\n  crop = false,\r\n  header = 'Send This Image?',\r\n}) => {\r\n  const [imageSrc, setImageSrc] = useState('');\r\n  const cropRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fr = new FileReader();\r\n    fr.onload = () => setImageSrc(fr.result);\r\n    fr.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  return (\r\n    <Modal dimmer=\"blurring\" open={true}>\r\n      <Modal.Header>{header}</Modal.Header>\r\n\r\n      <Modal.Content image>\r\n        {crop ? (\r\n          <AvatarEditor\r\n            ref={cropRef}\r\n            width={200}\r\n            height={200}\r\n            border={50}\r\n            image={imageSrc}\r\n          />\r\n        ) : (\r\n          <Image size=\"medium\" src={imageSrc} alt=\"preview\" />\r\n        )}\r\n      </Modal.Content>\r\n\r\n      <Modal.Actions>\r\n        <div className=\"image-upload-actions\">\r\n          <button className=\"cancel\" onClick={close}>\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"submit\"\r\n            onClick={() => {\r\n              if (crop && cropRef) {\r\n                const canvas = cropRef.current\r\n                  .getImageScaledToCanvas()\r\n                  .toDataURL();\r\n                fetch(canvas)\r\n                  .then(res => res.blob())\r\n                  .then(blob => onSubmit(blob));\r\n              } else {\r\n                onSubmit();\r\n              }\r\n            }}\r\n          >\r\n            Upload\r\n          </button>\r\n        </div>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}