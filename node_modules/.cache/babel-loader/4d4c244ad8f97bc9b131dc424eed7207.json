{"ast":null,"code":"import _objectSpread from\"F:/react/conversation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"F:/react/conversation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{useChat}from'context';import{useEffect}from'react';import{getChats,ChatEngine}from'react-chat-engine';import{LeftRail}from'components';import{ChatToolbar}from'components';import{ChatInput}from'components';import{MessageList}from'components';export var Chat=function Chat(){var _useChat=useChat(),myChats=_useChat.myChats,setMyChats=_useChat.setMyChats,chatConfig=_useChat.chatConfig,selectedChat=_useChat.selectedChat,selectChatClick=_useChat.selectChatClick,setSelectedChat=_useChat.setSelectedChat;useEffect(function(){console.log('My Chats: ',myChats);},[myChats]);useEffect(function(){console.log('Selected Chat: ',selectedChat);},[selectedChat]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(LeftRail,{}),!!chatConfig&&/*#__PURE__*/_jsx(ChatEngine,{hideUI:true,userName:chatConfig.userName,projectID:chatConfig.projectID,userSecret:chatConfig.userSecret,onConnect:function onConnect(){getChats(chatConfig,setMyChats);},onNewChat:function onNewChat(chat){if(chat.admin.username===chatConfig.userName){selectChatClick(chat);}setMyChats([].concat(_toConsumableArray(myChats),[chat]).sort(function(a,b){return a.id-b.id;}));},onDeleteChat:function onDeleteChat(chat){if((selectedChat===null||selectedChat===void 0?void 0:selectedChat.id)===chat.id){setSelectedChat(null);}setMyChats(myChats.filter(function(c){return c.id!==chat.id;}).sort(function(a,b){return a.id-b.id;}));},onNewMessage:function onNewMessage(chatId,message){if(selectedChat&&chatId===selectedChat.id){setSelectedChat(_objectSpread(_objectSpread({},selectedChat),{},{messages:[].concat(_toConsumableArray(selectedChat.messages),[message])}));}var chatThatMessageBelongsTo=myChats.find(function(c){return c.id===chatId;});var filteredChats=myChats.filter(function(c){return c.id!==chatId;});var updatedChat=_objectSpread(_objectSpread({},chatThatMessageBelongsTo),{},{last_message:message});setMyChats([updatedChat].concat(_toConsumableArray(filteredChats)).sort(function(a,b){return a.id-b.id;}));}}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"current-chat\",children:selectedChat?/*#__PURE__*/_jsxs(\"div\",{className:\"chat\",children:[/*#__PURE__*/_jsx(ChatToolbar,{}),/*#__PURE__*/_jsx(MessageList,{}),/*#__PURE__*/_jsx(ChatInput,{})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"no-chat-selected\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/img/pointLeft.png\",className:\"point-left\",alt:\"point-left\"}),\"Select a Chat\"]})})})]});};","map":{"version":3,"sources":["F:/react/conversation/src/components/Chat/Chat.jsx"],"names":["useChat","useEffect","getChats","ChatEngine","LeftRail","ChatToolbar","ChatInput","MessageList","Chat","myChats","setMyChats","chatConfig","selectedChat","selectChatClick","setSelectedChat","console","log","userName","projectID","userSecret","chat","admin","username","sort","a","b","id","filter","c","chatId","message","messages","chatThatMessageBelongsTo","find","filteredChats","updatedChat","last_message"],"mappings":"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","sourcesContent":["import { useChat } from 'context';\r\nimport { useEffect } from 'react';\r\nimport { getChats, ChatEngine } from 'react-chat-engine';\r\nimport { LeftRail } from 'components';\r\n\r\nimport { ChatToolbar } from 'components';\r\nimport { ChatInput } from 'components';\r\nimport { MessageList } from 'components';\r\n\r\nexport const Chat = () => {\r\n  const {\r\n    myChats,\r\n    setMyChats,\r\n    chatConfig,\r\n    selectedChat,\r\n    selectChatClick,\r\n    setSelectedChat,\r\n  } = useChat();\r\n\r\n  useEffect(() => {\r\n    console.log('My Chats: ', myChats);\r\n  }, [myChats]);\r\n\r\n  useEffect(() => {\r\n    console.log('Selected Chat: ', selectedChat);\r\n  }, [selectedChat]);\r\n\r\n  return (\r\n    <>\r\n      <LeftRail />\r\n      {!!chatConfig && (\r\n        <ChatEngine\r\n          hideUI={true}\r\n          userName={chatConfig.userName}\r\n          projectID={chatConfig.projectID}\r\n          userSecret={chatConfig.userSecret}\r\n          onConnect={() => {\r\n            getChats(chatConfig, setMyChats);\r\n          }}\r\n          onNewChat={chat => {\r\n            if (chat.admin.username === chatConfig.userName) {\r\n              selectChatClick(chat);\r\n            }\r\n            setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\r\n          }}\r\n          onDeleteChat={chat => {\r\n            if (selectedChat?.id === chat.id) {\r\n              setSelectedChat(null);\r\n            }\r\n            setMyChats(\r\n              myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n          onNewMessage={(chatId, message) => {\r\n            if (selectedChat && chatId === selectedChat.id) {\r\n              setSelectedChat({\r\n                ...selectedChat,\r\n                messages: [...selectedChat.messages, message],\r\n              });\r\n            }\r\n            const chatThatMessageBelongsTo = myChats.find(c => c.id === chatId);\r\n            const filteredChats = myChats.filter(c => c.id !== chatId);\r\n            const updatedChat = {\r\n              ...chatThatMessageBelongsTo,\r\n              last_message: message,\r\n            };\r\n            setMyChats(\r\n              [updatedChat, ...filteredChats].sort((a, b) => a.id - b.id),\r\n            );\r\n          }}\r\n        />\r\n      )}\r\n      <div className=\"chat-container\">\r\n        <div className=\"current-chat\">\r\n          {selectedChat ? (\r\n            <div className=\"chat\">\r\n              <ChatToolbar />\r\n              <MessageList />\r\n              <ChatInput />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-chat-selected\">\r\n              <img\r\n                src=\"/img/pointLeft.png\"\r\n                className=\"point-left\"\r\n                alt=\"point-left\"\r\n              />\r\n              Select a Chat\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}